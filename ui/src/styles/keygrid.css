/* A keyboard
 *
 * A keyboard is made up of one or more sub-boards.
 * A traditional keyboard just has one, while a split keyboard would have two.
 *
 * In smaller screen sizes, two halves should be shown vertically.
 * For larger screen sizes, they should be shown next to each other.
 */
.keymap-keyboard {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}
@container (min-width: 650px) {
  .keymap-keyboard {
    flex-direction: row;
  }
}

h2.keyboard-title {
  font-size: 1.25rem;
}

/* A grid of keys, like a keyboard would have
 */
keymap-keygrid {
  display: grid;
  pointer-events: none;
  user-select: none;
}

/* A single key */
keymap-key {
  padding: 0.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 0.125rem;
  font-family: var(--_key-legend-font);
  pointer-events: auto;
  outline: none;
  position: relative;
  color: var(--_key-fg);
  background-color: var(--_key-reg-bg);
  border: 1px solid var(--_key-reg-br);
  cursor: pointer;

  &:hover {
    background-color: var(--_key-reg-hv);
  }

  &:focus {
    background-color: var(--_key-reg-fc);
  }

  /* The order is important for the three selectors below.
   * When selectors overlap, the last one defined wins.
   *
   * Of active, related-to-active, and target-of-indicator,
   * we want the active styling to apply --
   * related-to-active will be a list of key IDs which always includes the active key,
   * and the active key is always the target of an indicator from the key info panel title bar.
   *
   * Currently we don't have any keys which are both related-to-active and target-of-indicator,
   * and mostly that won't make sense because
   * you wouldn't usually need to draw a diagram line to another key related to the active key.
   * But if it did happen that wa6, we'd probably want the related-to-active styling to apply.
   */
  &[target-of-indicator="true"] {
    background-color: var(--_key-tgt-bg);
    border: 1px solid var(--_key-tgt-br);
    &:hover {
      background-color: var(--_key-tgt-hv);
    }
    &:focus {
      background-color: var(--_key-tgt-fc);
    }
  }
  &[related-to-active="true"] {
    background-color: var(--_key-grp-bg);
    border: 1px solid var(--_key-grp-br);
    &:hover {
      background-color: var(--_key-grp-hv);
    }
    &:focus {
      background-color: var(--_key-grp-fc);
    }
  }
  &[active="true"] {
    background-color: var(--_key-sel-bg);
    border: 1px solid var(--_key-sel-br);
    &:hover {
      background-color: var(--_key-sel-hv);
    }
    &:focus {
      background-color: var(--_key-sel-fc);
    }
  }
  &[layer-entry-key="true"] {
    background-color: var(--_key-lay-bg);
    border: 1px solid var(--_key-lay-br);
    &:hover {
      background-color: var(--_key-lay-hv);
    }
    &:focus {
      background-color: var(--_key-lay-hv);
    }
  }
  &[layer-entry-key="true"][selected="true"] {
    background-color: var(--_key-lsl-bg);
    border: 1px solid var(--_key-lsl-br);
    &:hover {
      background-color: var(--_key-lsl-hv);
    }
    &:focus {
      background-color: var(--_key-lsl-hv);
    }
  }

  /* Glyph legends contain one character like `A` or two characters like `;:`,
   * and are shown in a larger font.
   * Text legends contain longer strings like `PgUp`,
   * probably restricted to four characters,
   * and are shown in a smaller font to fit in the space.
   */
  &.legend-type-glyph {
    font-size: calc(var(--keyboard-grid-unit) * 0.9);
  }
  &.legend-type-text {
    font-size: calc(var(--keyboard-grid-unit) * 0.667);
  }

  /* An image used as a legend for a key */
  & > img {
    width: 1rem;
    height: 1rem;
  }

  /* HTML legend container (for SVG and other HTML content) */
  & > div {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

/* Invert image colors in dark mode for keys with legend-image attribute */
@media (prefers-color-scheme: dark) {
  keymap-key {
    &[legend-image] > img {
      filter: invert(1);
    }
  }
}

/* A key that's not part of a keygrid */
.standalone-key {
  display: inline-block;
}

/* A key handle, which is an invisible element inside a key that can be used as an anchor point in a diagram */
.key-handle {
  height: 0.25rem;
  width: 0.25rem;
  margin: 0;
  padding: 0;
  border: none;
  pointer-events: none;
  position: absolute;
}

/* The keymap UI is a container for the keymap, info panel, and diagram
 * It is also the shadow DOM root, so it needs :host.
 */
keymap-ui,
:host {
  /* keymap-ui is a custom element, which doesn't get block by default.
   * If we don't set it here, position:relative of this + position:absolute of the canvas
   * will not work as expected.
   */
  display: block;

  position: relative;
}

/* The KID container holds the keymap, info panel, and diagram
 */
.keymap-ui-kid-container {
  display: flex;
  .keymap-ui-diamarg {
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    border: none;
    width: var(--kid-diamarg-width);
  }
  .keymap-ui-center-panel {
    display: flex;
    flex-direction: column;

    /* If keyboard is too wide, grow in both directions */
    justify-content: center;
    align-items: center;

    margin: 0;
    padding: 0;
    border: none;
    width: calc(100% - (var(--kid-diamarg-width) * 2));
  }
  .keymap-ui-keyinfo-container {
    bottom: auto;
    top: 0;
    left: 0;
    right: 0;
    text-align: left;
    border-radius: 0.375rem;
    padding: 1rem;
    margin: 1rem 0;
    width: 100%;

    .key-info-prose {
      margin: 1.125rem 0;
    }
  }
}
